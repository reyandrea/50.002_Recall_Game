module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [6],    // 5 buttons on IO Shield
    
    //LED strips
    output outled_1,
    output outled_2,
    output outled_3,
    output outled_4,
    output outled_5,
    output outled_6
  ) {
  
  sig rst;                  // reset signal
  ws2812b ws2812b;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      //multi_seven_seg segtimer;
      game_miniBeta gameMachine;
      
    }
    reset_conditioner reset_cond;
    
    //user input button declarations
    edge_detector edge_dt_btn_up (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_down(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_left (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_right(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_start (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_reset(#RISE(1), #FALL(0));

    button_conditioner btn_cond_up;
    button_conditioner btn_cond_down;
    button_conditioner btn_cond_left;
    button_conditioner btn_cond_right;
    button_conditioner btn_cond_start;
    button_conditioner btn_cond_reset;
  } 
  
  always {
    
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset

    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    usb_tx = usb_rx;          // loop serial port
    
    //Initialise buttons
    // Reduce bouncing effect of button
    btn_cond_up.in=io_button[5];    //C48
    btn_cond_down.in=io_button[4];  //C49
    btn_cond_left.in=io_button[3];  //B24
    btn_cond_right.in=io_button[2]; //B23
    btn_cond_start.in=io_button[1]; //B27 
    btn_cond_reset.in=io_button[0]; //B28
    
    edge_dt_btn_up.in=btn_cond_up.out; //get the edge of button press
    edge_dt_btn_down.in=btn_cond_down.out;
    edge_dt_btn_left.in=btn_cond_left.out; //get the edge of button press
    edge_dt_btn_right.in=btn_cond_right.out;
    edge_dt_btn_start.in=btn_cond_start.out; //get the edge of button press
    edge_dt_btn_reset.in=btn_cond_reset.out;
    
    gameMachine.up_button = edge_dt_btn_up.out;
    gameMachine.down_button = edge_dt_btn_down.out;
    gameMachine.left_button = edge_dt_btn_left.out;
    gameMachine.right_button = edge_dt_btn_right.out;
    gameMachine.start_button = edge_dt_btn_start.out;
    gameMachine.reset_button = edge_dt_btn_reset.out;
    
    //Initialise LED strips 
    ws2812b.clk = clk;
    ws2812b.rst_n = rst_n;
    ws2812b.usb_rx = usb_rx;
    ws2812b.color = gameMachine.colseloutput;
    ws2812b.action = b01;
    
    ws2812b.lit_leds_1 = gameMachine.inputledsel1;
    ws2812b.lit_leds_2 = gameMachine.inputledsel2;
    ws2812b.lit_leds_3 = gameMachine.inputledsel3;
    ws2812b.lit_leds_4 = gameMachine.inputledsel4;
    ws2812b.lit_leds_5 = gameMachine.inputledsel5;
    ws2812b.lit_leds_6 = gameMachine.inputledsel6;
    
    
    outled_1 = ws2812b.outled_1;
    outled_2 = ws2812b.outled_2; 
    outled_3 = ws2812b.outled_3; 
    outled_4 = ws2812b.outled_4; 
    outled_5 = ws2812b.outled_5; 
    outled_6 = ws2812b.outled_6;

  }
}