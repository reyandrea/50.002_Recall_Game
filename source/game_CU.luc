module game_CU (
    input clk,
    input rst,
    input up_button,
    input down_button,
    input right_button,
    input left_button,
    input start_button,
    input reset_button,
    input decrease_timer_gameplay,
    input decrease_timer_mapdisplay,
    
    input regfile_datain[16], //direct reading of regfile data from read_address_b
    
    output alufn[6], // ALUFN: -
    output asel[4], //ASEL: -
    output bsel[4],//BSEL: -
    output we_regfile[1],//WE: b1
    output regfile_read_address_a[4], //Ra: -
    output regfile_read_address_b[4], //Rb: -
    output regfile_write_address[4],//Rc: 0xD
    output wdsel[2], //WDSEL: b01
    output romsel[3], //ROMSEL: b000
    output outsel[2], //OUTSEL: b00
    output ledsel[2], //LEDSEL: b00
    output colsel[2]
  ) {
  
  .clk(clk){
    fsm game_fsm={     
      START_NEW_GAME,
      
      RESET_SCORE_TO_0,
      
      //RESET ROUND
      RESET_TIMER_0,
      RESET_X_COORD,  
      RESET_Y_COORD, 
      RESET_SELECT_MAPS,  
      RESET_CORRECT_MAP, 
      RESET_MEM_TRAIL_1,
      RESET_MEM_TRAIL_2,
      RESET_MEM_TRAIL_3,
      RESET_MEM_TRAIL_4,
      RESET_MEM_TRAIL_5,
      RESET_MEM_TRAIL_6,
      
      
      
      START_STATE,
      
      //Randomiser
      RANDOM_CHOOSE_MAP,
      RANDOM_SET_MAP,
      
      //Set map A display time
      A_CHECK_SCORE_0,
      A_CHECK_SCORE_0_BRANCH,
      A_SET_TIMER_0_S10,
      A_CHECK_SCORE_1,
      A_CHECK_SCORE_1_BRANCH,
      A_SET_TIMER_1_S7,
      A_SET_TIMER_2_S5,
      
      //Display map A
      MAP_A_DISPLAY,
      A_CHECK_TIMER_0,
      A_BRANCH_TIMER_0,
      A_DECREASE_TIMER_1,
      
      //Set map B display time
      B_CHECK_SCORE_0,
      B_CHECK_SCORE_0_BRANCH,
      B_SET_TIMER_0_S10,
      B_CHECK_SCORE_1,
      B_CHECK_SCORE_1_BRANCH,
      B_SET_TIMER_1_S7,
      B_SET_TIMER_2_S5,
      
      //Display map B
      MAP_B_DISPLAY,
      B_CHECK_TIMER_0,
      B_BRANCH_TIMER_0,
      B_DECREASE_TIMER_1,
      
      //Set map C display time
      C_CHECK_SCORE_0,
      C_CHECK_SCORE_0_BRANCH,
      C_SET_TIMER_0_S10,
      C_CHECK_SCORE_1,
      C_CHECK_SCORE_1_BRANCH,
      C_SET_TIMER_1_S7,
      C_SET_TIMER_2_S5,
      
      //Display map C   
      MAP_C_DISPLAY,
      C_CHECK_TIMER_0,
      C_BRANCH_TIMER_0,
      C_DECREASE_TIMER_1,
      
      //Display correct color
      SET_CORRECT_COLOUR_MAP,
      DISPLAY_CORRECT_COLOUR,
      CORRECT_COLOUR_CHECK_TIMER_0,
      CORRECT_COLOUR_BRANCH_TIMER_0,
      CORRECT_COLOUR_DECREASE_TIMER_1,
      
      
      DISPLAY_MEMORY_TRAILS,      
      SET_TIMER_90S,
      
      //Idle state timer
      //IDLE, TODO: UNCOMMENT LATER
      CHECK_GAME_TIMER,
      BRANCH_GAME_TIMER,
      DECREASE_GAME_TIMER,
      
      //Idle state movement checkers
      IDLE,
      UP_CHECKER,
      UP_CHECKER_BRANCH,
      DOWN_CHECKER,
      DOWN_CHECKER_BRANCH,
      LEFT_CHECKER,
      LEFT_CHECKER_BRANCH,
      RIGHT_CHECKER,
      RIGHT_CHECKER_BRANCH,
      
      //MOVEMENT coord updates
      UP_INCREASEBY1,
      DOWN_DECREASEBY1,
      RIGHT_INCREASEBY1,
      LEFT_DECREASEBY1,
      
      
      //<CHECK COLLISION//
      PULL_BIT_ROM,
      CHECK_COLLISION,
      CHECK_COLLISION_BRANCH,
      //CHECK COLLISION>//
      
      
      //MEMORY TRAILS
      CONVERT_X_6BIT,
      
      CHECK_Y_0,
      CHECK_Y_0_BRANCH,
      Y0_UPDATE_DISPLAY_MEMTRAIL,
      
      CHECK_Y_1,
      CHECK_Y_1_BRANCH,
      Y1_UPDATE_DISPLAY_MEMTRAIL,
      
      CHECK_Y_2,
      CHECK_Y_2_BRANCH,
      Y2_UPDATE_DISPLAY_MEMTRAIL,
      
      CHECK_Y_3,
      CHECK_Y_3_BRANCH,
      Y3_UPDATE_DISPLAY_MEMTRAIL,
      
      CHECK_Y_4,
      CHECK_Y_4_BRANCH,
      Y4_UPDATE_DISPLAY_MEMTRAIL,
      Y5_UPDATE_DISPLAY_MEMTRAIL,
      
      //for testing
      TEST_TRAIL,
      TEST_TRAIL_X,
      
      
      //End of round displays
      DISPLAY_SAD_FACE    
      
      
      
      
      };
  }

  always {
    // standard setting unless otherwise overwritten by each case 
    alufn = 0;
    asel = 0; 
    bsel = 0;
    we_regfile = 0;
    regfile_write_address = 1111;
    regfile_read_address_a = 0000;
    regfile_read_address_b = 0000;
    wdsel = 0;
    romsel = 0;
    outsel = 0;
    ledsel = 0;
    colsel = 0;
    
    if (rst) {
      //do something
    } else {
      case(game_fsm.q){
        game_fsm.START_NEW_GAME: 
          ledsel = b00;
          if (start_button){ //reset button instantly bypasses.
              game_fsm.d = game_fsm.RESET_SCORE_TO_0;
          }
               
          else {        
              game_fsm.d = game_fsm.START_NEW_GAME;
          }
          
        game_fsm.RESET_SCORE_TO_0: 
          alufn = b011100; //"B"
          //asel = ; 
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0000;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_TIMER_0;  
          
        game_fsm.RESET_TIMER_0: 
          alufn = b011100; //"B"
          //asel = ; 
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0101;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_X_COORD;
          
        game_fsm.RESET_X_COORD: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0001;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_Y_COORD;  
            
        game_fsm.RESET_Y_COORD: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0010;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_SELECT_MAPS;
            
        game_fsm.RESET_SELECT_MAPS: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0011;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_CORRECT_MAP;  
        
        game_fsm.RESET_CORRECT_MAP: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0100;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_MEM_TRAIL_1;
            
       game_fsm.RESET_MEM_TRAIL_1: 
          alufn = b011010; //"A"
          asel = b1001; //100000
          we_regfile = b1;
          regfile_write_address = b0110;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_MEM_TRAIL_2;
            
       game_fsm.RESET_MEM_TRAIL_2: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b0111;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_MEM_TRAIL_3;
            
       game_fsm.RESET_MEM_TRAIL_3: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b1000;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_MEM_TRAIL_4;     
            
       game_fsm.RESET_MEM_TRAIL_4: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b1001;
          wdsel = b00;
        
          game_fsm.d = game_fsm.RESET_MEM_TRAIL_5;     
            
        game_fsm.RESET_MEM_TRAIL_5: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b1010;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RESET_MEM_TRAIL_6; 
                
        game_fsm.RESET_MEM_TRAIL_6: 
          alufn = b011100; //"B"
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b1011;
          wdsel = b00;
          
          game_fsm.d = game_fsm.START_STATE;
          
        

            
        game_fsm.START_STATE:
          we_regfile = b0;
          romsel = b100; 
          outsel = b01;
          ledsel = b00;
          colsel = b10;
          if (start_button){
            game_fsm.d = game_fsm.RANDOM_CHOOSE_MAP;
          } else {
             game_fsm.d = game_fsm.START_STATE;
          }
          
        game_fsm.RANDOM_CHOOSE_MAP: 
          alufn = b011010; //"A"
          asel = b0001; 
          we_regfile = b1;
          regfile_write_address = b0100;
          wdsel = b00;
          
          game_fsm.d = game_fsm.RANDOM_SET_MAP;
          
         game_fsm.RANDOM_SET_MAP: 
            alufn = b011010; //"A"
            asel = b0010; 
            we_regfile = b1;
            regfile_write_address = b0011;
            wdsel = b00;
            
            game_fsm.d = game_fsm.A_CHECK_SCORE_0;
          
         game_fsm.A_CHECK_SCORE_0: 
            alufn = b110011; // CMPEQ
            asel = b0000; 
            bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0000;
            wdsel = b00;
            
            game_fsm.d = game_fsm.A_CHECK_SCORE_0_BRANCH;  
          
        game_fsm.A_CHECK_SCORE_0_BRANCH: 
            regfile_read_address_b = b1111; // temp reg 15
            
            if (regfile_datain[0]){                      //directly reads from Rb
              game_fsm.d = game_fsm.A_SET_TIMER_0_S10;
            }
            else{
              game_fsm.d = game_fsm.A_CHECK_SCORE_1;
            }   
          
        game_fsm.A_SET_TIMER_0_S10: 
            alufn = b011010; //"A"
            asel = b0111; 
            //bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_A_DISPLAY;   
              
        game_fsm.A_CHECK_SCORE_1: 
            alufn = b110011; // CMPEQ
            asel = b0000; 
            bsel = b0010 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0000;
            wdsel = b00;
            
            game_fsm.d = game_fsm.A_CHECK_SCORE_1_BRANCH;  
              
        game_fsm.A_CHECK_SCORE_1_BRANCH: 
            regfile_read_address_b = b1111; // temp reg 15
            
            if (regfile_datain[0]){                      //direct read in
              game_fsm.d = game_fsm.A_SET_TIMER_1_S7;
            }
            else{
              game_fsm.d = game_fsm.A_SET_TIMER_2_S5;}   
                
         game_fsm.A_SET_TIMER_1_S7:
            alufn = b011010; //"A"
            asel = b0110; 
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;

            game_fsm.d = game_fsm.MAP_A_DISPLAY;   
              
              
         game_fsm.A_SET_TIMER_2_S5:
            alufn = b011010; //"A"
            asel = b0101; 
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_A_DISPLAY;
          
         game_fsm.MAP_A_DISPLAY: 
      
            we_regfile = b0;
            romsel = b001;
            outsel = b01;
            ledsel = b00;
            colsel = b01;
            
            if (decrease_timer_mapdisplay){
              game_fsm.d = game_fsm.A_CHECK_TIMER_0;
            }
            else {
              game_fsm.d = game_fsm.MAP_A_DISPLAY;}
            
          game_fsm.A_CHECK_TIMER_0: 
            alufn = b110011; //CMPEQ
            asel = b0000; 
            bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0101;
            wdsel = b00;

            game_fsm.d = game_fsm.A_BRANCH_TIMER_0;          
                   
         game_fsm.A_BRANCH_TIMER_0: 
            regfile_read_address_b = b1111; // temp reg 15
            
            if (regfile_datain[0]){                      //direct read in
              game_fsm.d = game_fsm.B_CHECK_SCORE_0;
            }
            else{
              game_fsm.d = game_fsm.A_DECREASE_TIMER_1;
            }
              
              
        game_fsm.A_DECREASE_TIMER_1: 
            alufn = b000001;  //SUB
            asel = b0000; 
            bsel = b0010 ;
            we_regfile = b1;
            regfile_write_address = b0101;
            regfile_read_address_a = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_A_DISPLAY;
          
        game_fsm.B_CHECK_SCORE_0: 
          alufn = b110011; // CMPEQ
          asel = b0000; 
          bsel = b0001 ;
          we_regfile = b1;
          regfile_write_address = b1111; // temp reg 15
          regfile_read_address_a = b0000;
          wdsel = b00;
          
          game_fsm.d = game_fsm.B_CHECK_SCORE_0_BRANCH;  
          
      game_fsm.B_CHECK_SCORE_0_BRANCH: 
          regfile_read_address_b = b1111; // temp reg 15
          
          if (regfile_datain[0]){                      //direct read in
            game_fsm.d = game_fsm.B_SET_TIMER_0_S10;
          }
          else{
            game_fsm.d = game_fsm.B_CHECK_SCORE_1;
          }   
            
      game_fsm.B_SET_TIMER_0_S10: 
          alufn = b011010; //"A"
          asel = b0111; 
          we_regfile = b1;
          regfile_write_address = b0101;
          wdsel = b00;

          game_fsm.d = game_fsm.MAP_B_DISPLAY;   
            
      game_fsm.B_CHECK_SCORE_1: 
          alufn = b110011; // CMPEQ
          asel = b0000; 
          bsel = b0010 ;
          we_regfile = b1;
          regfile_write_address = b1111; // temp reg 15
          regfile_read_address_a = b0000;
          wdsel = b00;
          
          game_fsm.d = game_fsm.B_CHECK_SCORE_1_BRANCH;  
            
      game_fsm.B_CHECK_SCORE_1_BRANCH: 
          regfile_read_address_b = b1111; // temp reg 15

          
          if (regfile_datain[0]){                      //direct read in
            game_fsm.d = game_fsm.B_SET_TIMER_1_S7;
          }
          else{
            game_fsm.d = game_fsm.B_SET_TIMER_2_S5;}   
              
       game_fsm.B_SET_TIMER_1_S7:
          alufn = b011010; //"A"
          asel = b0110; 
          we_regfile = b1;
          regfile_write_address = b0101;
          wdsel = b00;
          
          game_fsm.d = game_fsm.MAP_B_DISPLAY;   
            
            
       game_fsm.B_SET_TIMER_2_S5:
          alufn = b011010; //"A"
          asel = b0101; 
          we_regfile = b1;
          regfile_write_address = b0101;
          wdsel = b00;
          
          game_fsm.d = game_fsm.MAP_B_DISPLAY;
            
          
        game_fsm.MAP_B_DISPLAY: 
        we_regfile = b0;
        romsel = b010;
        outsel = b01;
        ledsel = b00;
        colsel = b10;
          if (decrease_timer_mapdisplay){
            game_fsm.d = game_fsm.B_CHECK_TIMER_0;
          }
          else {
            game_fsm.d = game_fsm.MAP_B_DISPLAY;}

          
          
         game_fsm.B_CHECK_TIMER_0: 
            alufn = b110011; //CMPEQ
            asel = b0000; 
            bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0101;
            wdsel = b00;
        
            game_fsm.d = game_fsm.B_BRANCH_TIMER_0;
              
              
              
         game_fsm.B_BRANCH_TIMER_0: 
            regfile_read_address_b = b1111; // temp reg 15
            
            if (regfile_datain[0]){                      //direct read in
              
              game_fsm.d = game_fsm.C_CHECK_SCORE_0;
            }
            else{
              game_fsm.d = game_fsm.B_DECREASE_TIMER_1;
            }
              
              
        game_fsm.B_DECREASE_TIMER_1: 
            alufn = b000001;  //SUB
            asel = b0000; 
            bsel = b0010 ;
            we_regfile = b1;
            regfile_write_address = b0101;
            regfile_read_address_a = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_B_DISPLAY;
          
            game_fsm.C_CHECK_SCORE_0: 
            alufn = b110011; // CMPEQ
            asel = b0000; 
            bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0000;
            wdsel = b00;
            
            game_fsm.d = game_fsm.C_CHECK_SCORE_0_BRANCH;  
              
        game_fsm.C_CHECK_SCORE_0_BRANCH: 
            regfile_read_address_b = b1111; // temp reg 15
            
            if (regfile_datain[0]){                      //direct read in
              game_fsm.d = game_fsm.C_SET_TIMER_0_S10;
            }
            else{
              game_fsm.d = game_fsm.C_CHECK_SCORE_1;
            }   
              
        game_fsm.C_SET_TIMER_0_S10: 
            alufn = b011010; //"A"
            asel = b0111; 
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_C_DISPLAY;   
              
        game_fsm.C_CHECK_SCORE_1: 
            alufn = b110011; // CMPEQ
            asel = b0000; 
            bsel = b0010 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0000;
            wdsel = b00;
            
            game_fsm.d = game_fsm.C_CHECK_SCORE_1_BRANCH;  
              
        game_fsm.C_CHECK_SCORE_1_BRANCH: 
            regfile_read_address_b = b1111; // temp reg 15

            
            if (regfile_datain[0]){                      //direct read in
              game_fsm.d = game_fsm.C_SET_TIMER_1_S7;
            }
            else{
              game_fsm.d = game_fsm.C_SET_TIMER_2_S5;}   
                
         game_fsm.C_SET_TIMER_1_S7:
            alufn = b011010; //"A"
            asel = b0110; 
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_C_DISPLAY;   
              
              
         game_fsm.C_SET_TIMER_2_S5:
            alufn = b011010; //"A"
            asel = b0101; 
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;

            
            game_fsm.d = game_fsm.MAP_C_DISPLAY;
              
          
          
          game_fsm.MAP_C_DISPLAY: 
            we_regfile = b0;
            romsel = b011;
            outsel = b01;
            ledsel = b00;
            colsel = b11;
          
            if (decrease_timer_mapdisplay){
              game_fsm.d = game_fsm.C_CHECK_TIMER_0;
            }
            else {
              game_fsm.d = game_fsm.MAP_C_DISPLAY;
            }
          
          game_fsm.C_CHECK_TIMER_0: 
            alufn = b110011; //CMPEQ
            asel = b0000; 
            bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.C_BRANCH_TIMER_0;
          
          
          
         game_fsm.C_BRANCH_TIMER_0: 
            regfile_read_address_b = b1111; // temp reg 15
            
            if (regfile_datain[0]){                      //direct read in
              game_fsm.d = game_fsm.DISPLAY_CORRECT_COLOUR;
            }
            else{
              game_fsm.d = game_fsm.C_DECREASE_TIMER_1;
            }
            
            
        game_fsm.C_DECREASE_TIMER_1: 
            alufn = b000001; //SUB
            asel = b0000; 
            bsel = b0010 ;
            we_regfile = b1;
            regfile_write_address = b0101;
            regfile_read_address_a = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.MAP_C_DISPLAY;
          
          game_fsm.SET_CORRECT_COLOUR_MAP:
            alufn = b011010; //"A"
            asel = b0101; 
            we_regfile = b1;
            regfile_write_address = b0101;
            wdsel = b00;
            game_fsm.d = game_fsm.DISPLAY_CORRECT_COLOUR;
  
          
          game_fsm.DISPLAY_CORRECT_COLOUR: 
            we_regfile = b0;
            romsel = b111;
            outsel = b01;
            ledsel = b00;
            colsel = b00;
            
            if (decrease_timer_mapdisplay){
                game_fsm.d = game_fsm.CORRECT_COLOUR_CHECK_TIMER_0;
              }
            else {
                game_fsm.d = game_fsm.DISPLAY_CORRECT_COLOUR;
            }
          
          game_fsm.CORRECT_COLOUR_CHECK_TIMER_0: 
            alufn = b110011; //CMPEQ
            asel = b0000; 
            bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0101;
            wdsel = b00;
            
            game_fsm.d = game_fsm.CORRECT_COLOUR_BRANCH_TIMER_0;
          
          
          
           game_fsm.CORRECT_COLOUR_BRANCH_TIMER_0: 
              regfile_read_address_b = b1111; // temp reg 15

              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.DISPLAY_MEMORY_TRAILS;
              }
              else{
                game_fsm.d = game_fsm.CORRECT_COLOUR_DECREASE_TIMER_1;
              }  
        
        game_fsm.CORRECT_COLOUR_DECREASE_TIMER_1: 
            alufn = b000001; //SUB
            asel = b0000; 
            bsel = b0010 ;
            we_regfile = b1;
            regfile_write_address = b0101;
            regfile_read_address_a = b0101;
            wdsel = b00;

            
            game_fsm.d = game_fsm.DISPLAY_CORRECT_COLOUR;
            
          game_fsm.DISPLAY_MEMORY_TRAILS: 
            we_regfile = b0;
            ledsel = b01;
            
            game_fsm.d = game_fsm.SET_TIMER_90S;
          
        
         game_fsm.SET_TIMER_90S: 
            alufn = b011010; //A
            asel = b1000; 
            //bsel = b0001 ;
            we_regfile = b1;
            regfile_write_address = b0101;
            //regfile_read_address_a = b0101;
            //regfile_read_address_b = ;
            wdsel = b00;
            //romsel = b100;
            //outsel = b01;
            //ledsel = b01;
            
            game_fsm.d = game_fsm.IDLE; 
          
          
          game_fsm.IDLE: 
          
            ledsel = b01;
          //Check time first, more important
            /*
            if (decrease_timer_gameplay){
                game_fsm.d = game_fsm.CHECK_GAME_TIMER;
            }
            
            
        */
         
            //movement checker
            
            //else if (up_button){ //TODO: CHANGE BACK TO ORIGINAL
            if (up_button){ 
              game_fsm.d = game_fsm.UP_CHECKER;
              //game_fsm.d = game_fsm.UP_INCREASEBY1;
            } 
            
            else if (right_button){ 
              game_fsm.d = game_fsm.RIGHT_CHECKER;
              //game_fsm.d = game_fsm.RIGHT_INCREASEBY1;
            }
        
            
            else if (down_button){
                game_fsm.d = game_fsm.DOWN_CHECKER;
                //game_fsm.d = game_fsm.DOWN_DECREASEBY1;
            }
            else if (left_button){
                game_fsm.d = game_fsm.LEFT_CHECKER;
                //game_fsm.d = game_fsm.LEFT_DECREASEBY1;
            }
                      

            else if (reset_button){ 
                game_fsm.d = game_fsm.DISPLAY_SAD_FACE; 
             }      
            else{
                game_fsm.d = game_fsm.IDLE; 
            }
           
            /*DELETE TEST STATES BELOW ONCE DONE
           game_fsm.TEST_TRAIL:
            alufn = b011010; //"A"
            asel = b0110; //display 000111
            we_regfile = b1;
            regfile_write_address = b0110; //update y0
            wdsel = b00;
            ledsel = b01;
            game_fsm.d = game_fsm.IDLE;
      
          
          game_fsm.TEST_TRAIL_X:
            alufn = b011010; //"A"
            asel = b0000; 
            we_regfile = b1;
            regfile_write_address = b0111; //update y1 trail
            regfile_read_address_a = b0010; //reading y coord(0010), xcoord is 0001
            wdsel = b00;
            ledsel = b01;
            game_fsm.d = game_fsm.IDLE;
           */
          
          /*
          RIGHT MOVEMENT CHECKER
          */
      
          //Check if x=5
          game_fsm.RIGHT_CHECKER: 
            alufn = b110011; //CMPEQ      
            asel = b0000; 
            bsel = b0110; //5
            we_regfile = b1;
            regfile_write_address = b1111; //write to temp reg 15
            regfile_read_address_a = b0001; //read from xcoord
            wdsel = b00;
        
            game_fsm.d = game_fsm.RIGHT_CHECKER_BRANCH;  
            
          game_fsm.RIGHT_CHECKER_BRANCH: 
              regfile_read_address_b = b1111; // read from temp reg 15
              
              if (regfile_datain[0]){                      //direct read in
                //if x = 0 directly go to checks
                game_fsm.d = game_fsm.PULL_BIT_ROM; 
                //game_fsm.d = game_fsm.CONVERT_X_6BIT;  
              }
              else{
                game_fsm.d = game_fsm.RIGHT_INCREASEBY1; //if x !=5 increase xcoord first
              }
          
          //Increase x by 1
          game_fsm.RIGHT_INCREASEBY1: 
            alufn = b000000; //ADD
            asel = b0000; 
            bsel = b0010; // 1
            we_regfile = b1;
            regfile_write_address = b0001; //write to xcoord
            regfile_read_address_a = b0001; //read from xcoord
            wdsel = b00;
    
            game_fsm.d = game_fsm.PULL_BIT_ROM;
            //game_fsm.d = game_fsm.CONVERT_X_6BIT;
          
          /*
          LEFT MOVEMENT CHECKER
           */
          
          //Check if x=0
          game_fsm.LEFT_CHECKER: 
            alufn = b110011; //CMPEQ
            asel = b0000; 
            bsel = b0001; //0
            we_regfile = b1;
            regfile_write_address = b1111; //write to temp reg 15
            regfile_read_address_a = b0001; //read from xcoord
            wdsel = b00;
        
            game_fsm.d = game_fsm.LEFT_CHECKER_BRANCH;  
            
          game_fsm.LEFT_CHECKER_BRANCH: 
              regfile_read_address_b = b1111; // read from temp reg 15
              
              if (regfile_datain[0]){                      //direct read in
                //if x = 0 directly go to checks
                game_fsm.d = game_fsm.PULL_BIT_ROM; //TODO: CHANGE BACK TO ORIGINAL
                //game_fsm.d = game_fsm.CONVERT_X_6BIT;  
              }
              else{
                game_fsm.d = game_fsm.LEFT_DECREASEBY1; //if x !=0 decrease xcoord first
              }
          
          //Decrease x by 1
          game_fsm.LEFT_DECREASEBY1:
            alufn = b000001; //SUB
            asel = b0000; 
            bsel = b0010; // 1
            we_regfile = b1;
            regfile_write_address = b0001; //write to xcoord
            regfile_read_address_a = b0001; //read from xcoord
            wdsel = b00;
    
            game_fsm.d = game_fsm.PULL_BIT_ROM;
            //game_fsm.d = game_fsm.CONVERT_X_6BIT;
          
          /*
          UP MOVEMENT CHECKER
          */
      
          //Check if y=5
          game_fsm.UP_CHECKER: 
            alufn = b110011; //CMPEQ      
            asel = b0000; 
            bsel = b0110; //5
            we_regfile = b1;
            regfile_write_address = b1111; //write to temp reg 15
            regfile_read_address_a = b0010; //read from ycoord
            wdsel = b00;
        
            game_fsm.d = game_fsm.UP_CHECKER_BRANCH;  
            
          game_fsm.UP_CHECKER_BRANCH: 
              regfile_read_address_b = b1111; // read from temp reg 15
              
              if (regfile_datain[0]){                      //direct read in
                //if x = 0 directly go to checks
                game_fsm.d = game_fsm.PULL_BIT_ROM; 
                //game_fsm.d = game_fsm.CONVERT_X_6BIT;  
              }
              else{
                game_fsm.d = game_fsm.UP_INCREASEBY1; //if y!=5 increase ycoord first
              }
          
          //Increase y by 1
          game_fsm.UP_INCREASEBY1:
            alufn = b000000; //ADD
            asel = b0000; 
            bsel = b0010; // 1
            we_regfile = b1;
            regfile_write_address = b0010; //write to ycoord
            regfile_read_address_a = b0010; //read from ycoord
            wdsel = b00;
    
            game_fsm.d = game_fsm.PULL_BIT_ROM; 
            //game_fsm.d = game_fsm.CONVERT_X_6BIT; 
      
           /*
          DOWN MOVEMENT CHECKER
          */
      
          //Check if y=0
          game_fsm.DOWN_CHECKER: 
            alufn = b110011; //CMPEQ      
            asel = b0000; 
            bsel = b001; //0
            we_regfile = b1;
            regfile_write_address = b1111; //write to temp reg 15
            regfile_read_address_a = b0010; //read from ycoord
            wdsel = b00;
        
            game_fsm.d = game_fsm.DOWN_CHECKER_BRANCH;  
            
          game_fsm.DOWN_CHECKER_BRANCH: 
              regfile_read_address_b = b1111; // read from temp reg 15
              
              if (regfile_datain[0]){                      //direct read in
                //if x = 0 directly go to checks
                game_fsm.d = game_fsm.PULL_BIT_ROM;
                //game_fsm.d = game_fsm.CONVERT_X_6BIT;  
              }
              else{
                game_fsm.d = game_fsm.DOWN_DECREASEBY1; //if y!=0 DECREASE ycoord first
              }
          
          //Increase y by 1
          game_fsm.DOWN_DECREASEBY1:
            alufn = b000001; //SUB
            asel = b0000; 
            bsel = b0010; // 1
            we_regfile = b1;
            regfile_write_address = b0010; //write to ycoord
            regfile_read_address_a = b0010; //read from ycoord
            wdsel = b00;
    
            game_fsm.d = game_fsm.PULL_BIT_ROM;
            //game_fsm.d = game_fsm.CONVERT_X_6BIT;  
          
          /*
          COLLISION CHECKS
          */
          
          game_fsm.PULL_BIT_ROM: 
            we_regfile = b1;
            regfile_write_address = b1110; //write into temp reg 14
            wdsel = b01; //write data from rom
            romsel = b000; //input correct map index
            outsel = b00; //taking single bit
   
            game_fsm.d = game_fsm.CHECK_COLLISION;
          
          //check rom bit = 0 
          game_fsm.CHECK_COLLISION: 
              alufn = b110011; //CMPEQ 
              asel = b0000; 
              bsel = b0001; //0
              we_regfile = b1;
              regfile_write_address = b1111; // write into temp reg 15
              regfile_read_address_a = b1110; //read from temp reg 14
              wdsel = b00; //write data from alufn
      
              
              game_fsm.d = game_fsm.CHECK_COLLISION_BRANCH;
                
                
           game_fsm.CHECK_COLLISION_BRANCH: 
              regfile_read_address_b = b1111; // temp reg 15
              
              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.DISPLAY_SAD_FACE;
              }
              else{
                game_fsm.d = game_fsm.CONVERT_X_6BIT;
              }
        
          game_fsm.CONVERT_X_6BIT: 
            alufn = b100001; //"SHR"
            asel = b1001; //b100000
            bsel = b0000; 
            we_regfile = b1;
            regfile_write_address = b1101; //write in temp reg 13
            regfile_read_address_b = b0001; //read from x coord

            wdsel = b00;
            ledsel = b01;

            game_fsm.d = game_fsm.CHECK_Y_0; 
      
          game_fsm.CHECK_Y_0: 
            alufn = b110011; //CMPEQ
            asel = b0000; 
            bsel = b0001 ; //0
            we_regfile = b1;
            regfile_write_address = b1111; // temp reg 15
            regfile_read_address_a = b0010; //ycoord
            wdsel = b00;
            
            game_fsm.d = game_fsm.CHECK_Y_0_BRANCH;
          
          
          game_fsm.CHECK_Y_0_BRANCH: 
              regfile_read_address_b = b1111; // temp reg 15
      
              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.Y0_UPDATE_DISPLAY_MEMTRAIL;
              }
              else{
                //game_fsm.d = game_fsm.CHECK_Y_1; //TODO: REVERT BACK TO ORIGINAL
                game_fsm.d = game_fsm.CHECK_Y_1;
              }           
          
          game_fsm.Y0_UPDATE_DISPLAY_MEMTRAIL: 
              alufn = b011110; //OR
              asel = b0000;  
              bsel = b0000;
              we_regfile = b1;
              regfile_write_address = b0110; //write to memtrail1
              regfile_read_address_a = b0110; // read from memtrail 1
              regfile_read_address_b = b1101; //read from temp reg 13
              wdsel = b00;
              ledsel = b01;
      
              game_fsm.d = game_fsm.IDLE;
         
         game_fsm.CHECK_Y_1: 
              alufn = b110011; //CMPEQ
              asel = b0000; 
              bsel = b0010; //1
              we_regfile = b1;
              regfile_write_address = b1111; // temp reg 15
              regfile_read_address_a = b0010; //ycoord
              wdsel = b00;
              
              game_fsm.d = game_fsm.CHECK_Y_1_BRANCH;
          
          
          game_fsm.CHECK_Y_1_BRANCH: 
              regfile_read_address_b = b1111; // temp reg 15
      
              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.Y1_UPDATE_DISPLAY_MEMTRAIL;
              }
              else{
                game_fsm.d = game_fsm.CHECK_Y_2; 
              } 
          
          game_fsm.Y1_UPDATE_DISPLAY_MEMTRAIL: 
              alufn = b011110; //OR;
              asel = b0000; 
              bsel = b0000;
              we_regfile = b1;
              regfile_write_address = b0111; //write to memtrail 2
              regfile_read_address_a = b0111; //read from memtrail 2
              regfile_read_address_b = b1101; // read form temp reg 13
              wdsel = b00;
              ledsel = b01;
      
              game_fsm.d = game_fsm.IDLE;
      
          game_fsm.CHECK_Y_2: 
              alufn = b110011; //CMPEQ
              asel = b0000; 
              bsel = b0011; //2
              we_regfile = b1;
              regfile_write_address = b1111; // temp reg 15
              regfile_read_address_a = b0010; //ycoord
              wdsel = b00;
              
              game_fsm.d = game_fsm.CHECK_Y_2_BRANCH;
          
          
          game_fsm.CHECK_Y_2_BRANCH: 
              regfile_read_address_b = b1111; // temp reg 15
      
              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.Y2_UPDATE_DISPLAY_MEMTRAIL;
              }
              else{
                game_fsm.d = game_fsm.CHECK_Y_3; 
              } 
          
          game_fsm.Y2_UPDATE_DISPLAY_MEMTRAIL: 
              alufn = b011110; //OR;
              asel = b0000; 
              bsel = b0000;
              we_regfile = b1;
              regfile_write_address = b1000; //write to memtrail 3
              regfile_read_address_a = b1000; //read from memtrail 3
              regfile_read_address_b = b1101; // read form temp reg 13
              wdsel = b00;
              ledsel = b01;
      
              game_fsm.d = game_fsm.IDLE;
      
          game_fsm.CHECK_Y_3: 
              alufn = b110011; //CMPEQ
              asel = b0000; 
              bsel = b0100; //3
              we_regfile = b1;
              regfile_write_address = b1111; // temp reg 15
              regfile_read_address_a = b0010; //ycoord
              wdsel = b00;
              
              game_fsm.d = game_fsm.CHECK_Y_3_BRANCH;
          
          
          game_fsm.CHECK_Y_3_BRANCH: 
              regfile_read_address_b = b1111; // temp reg 15
      
              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.Y3_UPDATE_DISPLAY_MEMTRAIL;
              }
              else{
                game_fsm.d = game_fsm.CHECK_Y_4;
              }
          
          game_fsm.Y3_UPDATE_DISPLAY_MEMTRAIL: 
              alufn = b011110; //OR;
              asel = b0000; 
              bsel = b0000;
              we_regfile = b1;
              regfile_write_address = b1001; //write to memtrail 4
              regfile_read_address_a = b1001; //read from memtrail 4
              regfile_read_address_b = b1101; // read form temp reg 13
              wdsel = b00;
              ledsel = b01;
      
              game_fsm.d = game_fsm.IDLE;
      
          game_fsm.CHECK_Y_4: 
              alufn = b110011; //CMPEQ
              asel = b0000; 
              bsel = b0101; //4
              we_regfile = b1;
              regfile_write_address = b1111; // temp reg 15
              regfile_read_address_a = b0010; //ycoord
              wdsel = b00;
              
              game_fsm.d = game_fsm.CHECK_Y_4_BRANCH;
          
          
          game_fsm.CHECK_Y_4_BRANCH: 
              regfile_read_address_b = b1111; // temp reg 15
      
              if (regfile_datain[0]){                      //direct read in
                game_fsm.d = game_fsm.Y4_UPDATE_DISPLAY_MEMTRAIL;
              }
              else{
                game_fsm.d = game_fsm.Y5_UPDATE_DISPLAY_MEMTRAIL;
              }
      
          game_fsm.Y4_UPDATE_DISPLAY_MEMTRAIL: 
              alufn = b011110; //OR;
              asel = b0000; 
              bsel = b0000;
              we_regfile = b1;
              regfile_write_address = b1010; //write to memtrail 5
              regfile_read_address_a = b1010; //read from memtrail 5
              regfile_read_address_b = b1101; // read form temp reg 13
              wdsel = b00;
              ledsel = b01;
      
              game_fsm.d = game_fsm.IDLE;
      
          game_fsm.Y5_UPDATE_DISPLAY_MEMTRAIL: 
              alufn = b011110; //OR;
              asel = b0000; 
              bsel = b0000;
              we_regfile = b1;
              regfile_write_address = b1011; //write to memtrail 6
              regfile_read_address_a = b1011; //read from memtrail 6
              regfile_read_address_b = b1101; // read form temp reg 13
              wdsel = b00;
              ledsel = b01;
      
              game_fsm.d = game_fsm.IDLE;
          
          game_fsm.DISPLAY_SAD_FACE: 
              we_regfile = b0;
              romsel = b110;
              outsel = b01;
              ledsel = b00;
              colsel = b01;
              
              game_fsm.d = game_fsm.START_NEW_GAME;
          
        }
      }
    }
  }

